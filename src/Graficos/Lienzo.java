/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Graficos;

import java.awt.Graphics;
import java.awt.image.BufferedImage;
import static java.lang.Thread.sleep;

/**
 *
 * @author Jorge
 */
public final class Lienzo extends javax.swing.JPanel implements Runnable {

    /**
     * Creates new form Lienzo
     */
    private static final String[] DIRECCIONES = {"Up", "Down", "Right", "Left"};

    Sprite[] sprites = new Sprite[Sprite.TOTAL_SPRITES];
    Sprite[] guyDown = new Sprite[3];
    Sprite[] guyUp = new Sprite[3];
    Sprite[] guyRight = new Sprite[3];
    Sprite[] guyLeft = new Sprite[3];

    private Animation currentAnimation;
    
    static final long FPS = 30;
    boolean running = false;

    public Lienzo(int x, int y) {
        initComponents();
        loadAllSprites();
        
        setLocation(200, 0);
        setSize(x-200, y-150);
        
        loadAnimations(getWidth(), getHeight());
    
    }
    
    

    public final void loadAllSprites() {
    
        sprites[0] = new Sprite("guy" + DIRECCIONES[0] + 1);
        sprites[1] = new Sprite("guy" + DIRECCIONES[0] + 2);
        sprites[2] = new Sprite("guy" + DIRECCIONES[0] + 3);
        
        sprites[3] = new Sprite("guy" + DIRECCIONES[1] + 1);
        sprites[4] = new Sprite("guy" + DIRECCIONES[1] + 2);
        sprites[5] = new Sprite("guy" + DIRECCIONES[1] + 3);
        
        sprites[6] = new Sprite("guy" + DIRECCIONES[2] + 1);
        sprites[7] = new Sprite("guy" + DIRECCIONES[2] + 2);
        sprites[8] = new Sprite("guy" + DIRECCIONES[2] + 3);
        
        sprites[9] = new Sprite("guy" + DIRECCIONES[3] + 1);
        sprites[10] = new Sprite("guy" + DIRECCIONES[3] + 2);
        sprites[11] = new Sprite("guy" + DIRECCIONES[3] + 3);

        sprites[12] = new Sprite("suelo1");
        sprites[13] = new Sprite("chair1");
        sprites[14] = new Sprite("rack1"); 
    }

    public void loadAnimations(int initX, int initY){
        BufferedImage[] up = {sprites[0].getSprite(), sprites[1].getSprite(), sprites[2].getSprite()};
        System.out.println("("+initX+","+initY+")");
        Animation upAnimation = new Animation(up, 2000000, initX/2-16, initY-50, 0, -10);
        currentAnimation = upAnimation;
        currentAnimation.start();
    }
    
    private void setCurrentAnimation(Animation animation){
        currentAnimation = animation;
    }
    
    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);
        currentAnimation.drawSprite(g);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    public void start() {
        running = true;
        Thread thread = new Thread(this);
        thread.start();
    }

    @Override
    public void run() {

        long tiempoActual = System.currentTimeMillis();

        long ticksPS = 1000 / FPS;
        long startTime;
        long sleepTime;
        long beginTime = System.currentTimeMillis();

        while (running) {
            startTime = System.currentTimeMillis();
            repaint();
            currentAnimation.update(startTime);
/*
            sleepTime = ticksPS - (System.currentTimeMillis() - startTime);
            try {
                if (sleepTime > 0) {
                    sleep(sleepTime);
                } else {
                    sleep(10);
                }
            } catch (Exception e) {
                e.printStackTrace();
            }*/
        }
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
